"use strict";function _toConsumableArray(r){return _arrayWithoutHoles(r)||_iterableToArray(r)||_unsupportedIterableToArray(r)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(r,t){if(r){if("string"==typeof r)return _arrayLikeToArray(r,t);var e=Object.prototype.toString.call(r).slice(8,-1);return"Object"===e&&r.constructor&&(e=r.constructor.name),"Map"===e||"Set"===e?Array.from(r):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?_arrayLikeToArray(r,t):void 0}}function _iterableToArray(r){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(r))return Array.from(r)}function _arrayWithoutHoles(r){if(Array.isArray(r))return _arrayLikeToArray(r)}function _arrayLikeToArray(r,t){(null==t||t>r.length)&&(t=r.length);for(var e=0,n=new Array(t);e<t;e++)n[e]=r[e];return n}var flickerAnimation=function(r){var t=_toConsumableArray(document.querySelectorAll("[data-js-flicker]"));if(!t.length)return!1;t.forEach(function(r){var t=r.textContent.trim(),e=r.dataset.jsFlicker?parseInt(r.dataset.jsFlicker):void 0;r.innerHTML=function(r){for(var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:1,e=r.split(""),n=[" ","-",",",";",":","(",")"],a=[],o=0;o<t;o++){var i=Math.floor(Math.random()*e.length),l=e[i];a.includes(i)||n.includes(l)||(e[i]='<span class="flicker">'.concat(l,"</span>"),a.push(i))}return e.join("")}(t,e)})};flickerAnimation();var colors=_toConsumableArray(document.querySelectorAll("button")),signs=_toConsumableArray(document.querySelectorAll('[class$="sign"]'));colors.forEach(function(r){r.addEventListener("click",function(r){var t=r.target.getAttribute(["data-color"]);signs.forEach(function(r){r.setAttribute("hidden",!0),r.getAttribute(["data-color"])===t&&r.removeAttribute("hidden",!1)})})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ha2UtaXQtd29yay5qcyJdLCJuYW1lcyI6WyJmbGlja2VyQW5pbWF0aW9uIiwiXyIsImFuaW1hdGVkRWxlbWVudHMiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJsZW5ndGgiLCJmb3JFYWNoIiwiZWxlbWVudCIsInRleHQiLCJ0ZXh0Q29udGVudCIsInRyaW0iLCJjb3VudCIsImRhdGFzZXQiLCJqc0ZsaWNrZXIiLCJwYXJzZUludCIsInVuZGVmaW5lZCIsImlubmVySFRNTCIsInN0cmluZyIsIml0ZXJhdGlvbnMiLCJhcmd1bWVudHMiLCJsZXR0ZXJzIiwic3BsaXQiLCJleGNsdWRlZENoYXJhY3RlcnMiLCJleGNsdWRlZEluZGV4ZXMiLCJpIiwicmFuZG9tSW5kZXgiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJzZWxlY3RlZExldHRlciIsImluY2x1ZGVzIiwiY29uY2F0IiwicHVzaCIsImpvaW4iLCJ3cmFwUmFuZG9tQ2hhcmFjdGVycyIsImNvbG9ycyIsInNpZ25zIiwiY29sb3IiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJjdXJyZW50Q29sb3IiLCJ0YXJnZXQiLCJnZXRBdHRyaWJ1dGUiLCJzaWduIiwic2V0QXR0cmlidXRlIl0sIm1hcHBpbmdzIjoiNjlCQUNBLElBQUFBLGlCQUFBLFNBQUFDLEdBRUEsSUFBQUMsRUFBQUMsbUJBQUFDLFNBQUFDLGlCQUFBLHNCQUdBLElBQUFILEVBQUFJLE9BQUEsT0FBQSxFQVdBSixFQUFBSyxRQUFBLFNBQUFDLEdBR0EsSUFBQUMsRUFBQUQsRUFBQUUsWUFBQUMsT0FZQUMsRUFBQUosRUFBQUssUUFBQUMsVUFBQUMsU0FBQVAsRUFBQUssUUFBQUMsZ0JBQUFFLEVBWEFSLEVBQUFTLFVBWkEsU0FBQUMsR0FSQSxJQVFBLElBQUFDLEVBQUEsRUFBQUMsVUFBQWQsYUFBQVUsSUFBQUksVUFBQSxHQUFBQSxVQUFBLEdBQUEsRUFDQUMsRUFBQUgsRUFBQUksTUFBQSxJQUNBQyxFQUFBLENBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsS0FDQUMsRUFBQSxHQVhBQyxFQUFBLEVBQUFBLEVBQUFOLEVBQUFNLElBQUEsQ0FDQSxJQUFBQyxFQUFBQyxLQUFBQyxNQUFBRCxLQUFBRSxTQUFBUixFQUFBZixRQUNBd0IsRUFBQVQsRUFBQUssR0FrQkFGLEVBQUFPLFNBQUFMLElBQUFILEVBQUFRLFNBQUFELEtBWkFULEVBQUFLLEdBQUEseUJBQUFNLE9BQUFGLEVBQUEsV0FBQU4sRUFBQVMsS0FBQVAsSUFHQSxPQUFBTCxFQUFBYSxLQUFBLElBU0FDLENBQUExQixFQUFBRyxNQUlBWixtQkFFQSxJQUFBb0MsT0FBQWpDLG1CQUFBQyxTQUFBQyxpQkFBQSxXQWNBZ0MsTUFBQWxDLG1CQUFBQyxTQUFBQyxpQkFBQSxvQkFYQUgsT0FBQUEsUUFBQUEsU0FBQUEsR0FFQW9DLEVBQUFDLGlCQUFBLFFBQUEsU0FBQUMsR0FFQSxJQWVBQyxFQWZBRCxFQUFBRSxPQWVBQyxhQUFBLENBQUEsZUFUQU4sTUFBQTlCLFFBQUEsU0FBQXFDLEdBYUFBLEVBQUFDLGFBQUEsVUFBQSxHQUVBRCxFQUFBRCxhQUFBLENBQUEsaUJBQUFGLEdBWkFMLEVBQUFBLGdCQUFBQSxVQUFBQSIsImZpbGUiOiJtYWtlLWl0LXdvcmsuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBhcHBseSBmbGlja2VyIGFuaW1hdGlvbiB0byBjZXJ0YWluIGVsZW1lbnRzIG9uIHRoZSBwYWdlXG5jb25zdCBmbGlja2VyQW5pbWF0aW9uID0gXyA9PiB7XG4gIC8vIGdldCBhbGwgYW5pbWF0ZWQgZWxlbWVudHMgZnJvbSB0aGUgcGFnZSBpbiBhbiBhcnJheVxuICBjb25zdCBhbmltYXRlZEVsZW1lbnRzID0gWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWpzLWZsaWNrZXJdJyldXG5cbiAgLy8gcXVpdCBmdW5jdGlvbiBpcyB0aGVyZSBhcmUgbm8gZmxpY2tlciBlbGVtZW50cyBvbiB0aGUgcGFnZVxuICBpZiAoIWFuaW1hdGVkRWxlbWVudHMubGVuZ3RoKSByZXR1cm4gZmFsc2VcblxuICAvLyBoZWxwZXIgZnVuY3Rpb24gdG8gd3JhcCByYW5kb20gbGV0dGVycyBpbiBhIDxzcGFuPlxuICBjb25zdCB3cmFwUmFuZG9tQ2hhcmFjdGVycyA9IChzdHJpbmcsIGl0ZXJhdGlvbnMgPSAxKSA9PiB7XG4gICAgY29uc3QgbGV0dGVycyA9IHN0cmluZy5zcGxpdCgnJylcbiAgICBjb25zdCBleGNsdWRlZENoYXJhY3RlcnMgPSBbJyAnLCAnLScsICcsJywgJzsnLCAnOicsICcoJywgJyknXVxuICAgIGNvbnN0IGV4Y2x1ZGVkSW5kZXhlcyA9IFtdXG5cbiAgICAvLyBydW4gdGhlIG51bWJlciBvZiBsZXR0ZXJzIHRvIHdyYXBcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZXJhdGlvbnM7IGkrKykge1xuICAgICAgY29uc3QgcmFuZG9tSW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBsZXR0ZXJzLmxlbmd0aClcbiAgICAgIGNvbnN0IHNlbGVjdGVkTGV0dGVyID0gbGV0dGVyc1tyYW5kb21JbmRleF1cblxuICAgICAgLy8gY2hlY2sgdG8gc2VlIGlmIHdlIGRvbid0IGhpdCBhbnkgZXhjbHVkZWQgY2hhcmFjdGVyc1xuICAgICAgLy8gb3IgaGl0IHRoZSBzYW1lIGxldHRlcnNcbiAgICAgIGlmICghZXhjbHVkZWRJbmRleGVzLmluY2x1ZGVzKHJhbmRvbUluZGV4KSAmJiAhZXhjbHVkZWRDaGFyYWN0ZXJzLmluY2x1ZGVzKHNlbGVjdGVkTGV0dGVyKSkge1xuICAgICAgICBsZXR0ZXJzW3JhbmRvbUluZGV4XSA9IGA8c3BhbiBjbGFzcz1cImZsaWNrZXJcIj4ke3NlbGVjdGVkTGV0dGVyfTwvc3Bhbj5gXG4gICAgICAgIGV4Y2x1ZGVkSW5kZXhlcy5wdXNoKHJhbmRvbUluZGV4KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbGV0dGVycy5qb2luKCcnKVxuICB9XG5cbiAgLy8gcmVwbGFjZSB0aGUgcGxhaW4gdGV4dCBjb250ZW50IGluIGVhY2ggZWxlbWVudFxuICBhbmltYXRlZEVsZW1lbnRzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICBjb25zdCB0ZXh0ID0gZWxlbWVudC50ZXh0Q29udGVudC50cmltKClcbiAgICBjb25zdCBjb3VudCA9IGVsZW1lbnQuZGF0YXNldC5qc0ZsaWNrZXIgPyBwYXJzZUludChlbGVtZW50LmRhdGFzZXQuanNGbGlja2VyKSA6IHVuZGVmaW5lZFxuICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gd3JhcFJhbmRvbUNoYXJhY3RlcnModGV4dCwgY291bnQpXG4gIH0pXG59XG5cbmZsaWNrZXJBbmltYXRpb24oKVxuXG4vLyBjaGFuZ2UgY29sb3JzXG5jb25zdCBjb2xvcnMgPSBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYnV0dG9uJyldXG5jb25zdCBzaWducyA9IFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbY2xhc3MkPVwic2lnblwiXScpXVxuXG5jb2xvcnMuZm9yRWFjaChjb2xvciA9PiB7XG4gIC8vIGFkZCBjbGljayBldmVudCBvbiBlYWNoIGJ1dHRvblxuICBjb2xvci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcbiAgICAvLyBnZXQgdGhlIGN1cnJlbnRseSBjbGlja2VkIGJ1dHRvblxuICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldFxuICAgIC8vIGdldCB0aGUgY3VycmVudCBjb2xvciBvZiB0aGUgY3VycmVudCBidXR0b25cbiAgICBjb25zdCBjdXJyZW50Q29sb3IgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFsnZGF0YS1jb2xvciddKVxuXG4gICAgLy8gbG9vcCB0aHJvdWdoIGFsbCBuZW9uIHNpZ25zIGFuZCBoaWRlIHRoZW0sIGV4Y2VwdCB0aGUgY29ycmVzcG9uZGluZyBjb2xvclxuICAgIHNpZ25zLmZvckVhY2goc2lnbiA9PiB7XG4gICAgICBzaWduLnNldEF0dHJpYnV0ZSgnaGlkZGVuJywgdHJ1ZSlcblxuICAgICAgaWYgKHNpZ24uZ2V0QXR0cmlidXRlKFsnZGF0YS1jb2xvciddKSA9PT0gY3VycmVudENvbG9yKSB7XG4gICAgICAgIHNpZ24ucmVtb3ZlQXR0cmlidXRlKCdoaWRkZW4nLCBmYWxzZSlcbiAgICAgIH1cbiAgICB9KVxuICB9KVxufSlcbiJdfQ==
